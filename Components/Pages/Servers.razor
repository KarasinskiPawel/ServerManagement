@page "/servers"
@page "/servers/back_from/{cityName}"

@using System.Diagnostics

@rendermode InteractiveServer
@inject IServersEFCoreRepository ServersEFCoreRepository

@inject NavigationManager NavManager;
@inject TorontoOnlineServersStore TorontoOnlineServersStore;

<h3>Servers</h3>
<br/>
<br />

<CityListComponent
@ref="cityListComponent"
SelectCityCallback="HandleCitySelection"
selectedCity="@this.selectedCity">
</CityListComponent>

<br />

<SearchBarComponent
@ref="searchBarComponent"
SearchServerCallback="HandleSearchServer"
style="width: 1000px;"
data-my-attribute="my data">
</SearchBarComponent>

<CascadingValue Name="SelectedCity" Value="@selectedCity">
    <ServerListComponent @rendermode="InteractiveServer"
    CityName="@this.selectedCity"
    SearchFilter="@searchFilter">
    </ServerListComponent>
</CascadingValue>
<br/>


<p>
    <a href="/servers/add" class="btn btn-primary"> Add server </a>
</p>

<p>
    @*     <button class="btn btn-secondary"
        @onclick="@(() => {
            //this.servers.Insert(0, new Server { Name = "ServerA", City = "Toronto" });
        })">
        Add server 2
    </button> *@
</p>

@code {
    [Parameter]
    public string? CityName { get; set; }

    private string selectedCity = "Toronto";
    private string searchFilter = "";

    private CityListComponent? cityListComponent;
    private SearchBarComponent? searchBarComponent;

    public void HandleCitySelection(string cityName){
        selectedCity = cityName;
        this.searchFilter = string.Empty;

        searchBarComponent?.ClearFilter();
    }

    private void HandleSearchServer(string searchFilter)
    {
        this.searchFilter = searchFilter;

        cityListComponent?.ClearSelection();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);

        if(firstRender){
            if (NavManager.Uri.Contains("back_from") && !string.IsNullOrWhiteSpace(CityName))
            {
                selectedCity = CityName;
                StateHasChanged();
            }

            var serversToronto = ServersEFCoreRepository.GetServerByCity("Toronto");

            if(serversToronto is not null)
            {
                TorontoOnlineServersStore.SetNumbersServersOnline(serversToronto.Count(a => a.IsOnline));
            }
        }
    }

    private void HandleSearch(){
        //this.servers = ServersRepository.SearchServers(serverFilter);
        //this.selectedCity = string.Empty;
    }
}
