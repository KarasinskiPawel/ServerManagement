@page "/servers/add"

@rendermode InteractiveServer

@using System.Diagnostics

@inject NavigationManager NavigationManager

<h3>Add server</h3>
<br/>
<br/>

<EditForm Model="server" FormName="formServer" OnValidSubmit="Submit">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ValidationSummary></ValidationSummary>

    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label"> Name </label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="server.Name" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => server.Name"></ValidationMessage>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label"> City </label>
        </div>
        <div class="col-6">
            <InputText @bind-Value="server.City" class="form-control"></InputText>
        </div>
        <div class="col">
            <ValidationMessage For="() => server.City"></ValidationMessage>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-2">
            <label class="col-form-label"> IsOnline ? </label>
        </div>
        <div class="col-6">
            <InputCheckbox @bind-Value="server.IsOnline"></InputCheckbox>
        </div>
    </div>
    <button class="btn btn-primary" type="submit"> Save </button>
    &nbsp;
    <a href="/servers" class="btn btn-primary"> Close </a>

    <ValidationSummary></ValidationSummary>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private Server server { get; set; } = new Server() { IsOnline = false };

    private async Task Submit()
    {
        if (server is not null)
        {
            ServersRepository.AddServer(server);
            await Task.Delay(100);
        }

        NavigationManager.NavigateTo("/servers");
    }
}
