@page "/servers/edit/{id:int}"

@inject NavigationManager NavigationManager
@inject IServersEFCoreRepository ServersEFCoreRepository

@inject IJSRuntime IJSRuntime

<NavigationLock
    OnBeforeInternalNavigation="OnBeforeInternalNavigation"
    ConfirmExternalNavigation="true" >
</NavigationLock>

<h3>EditServer</h3>
<br/>
<br />

@if(server is not null)
{
    <EditForm Model="server" FormName="formServer" OnValidSubmit="Submit">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        @*         <ValidationSummary></ValidationSummary> *@

        <InputNumber @bind-Value="server.ServerId" hidden></InputNumber>

        <FieldComponent Label="Name">
            <Control>
                <InputText @bind-Value="server.Name" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => server.Name"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>

        <FieldComponent Label="City">
            <Control>
                <InputText @bind-Value="server.City" class="form-control"></InputText>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => server.City"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>

        <FieldComponent Label="IsOnline">
            <Control>
                <InputCheckbox @bind-Value="server.IsOnline" class="form-check"></InputCheckbox>
            </Control>
            <ValidationControl>
                <ValidationMessage For="() => server.IsOnline"></ValidationMessage>
            </ValidationControl>
        </FieldComponent>

        <button class="btn btn-primary" type="submit"> Update </button>
        &nbsp;
        <a href="/servers" class="btn btn-primary"> Close </a>

        @*         <ValidationSummary></ValidationSummary> *@
    </EditForm>
}

@code {
    [Parameter]
    public int Id { get; set; }

    [SupplyParameterFromForm(FormName = "formServer")]
    private Server? server { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        server ??= ServersEFCoreRepository.GetServerById(this.Id);
    }

    private async Task Submit()
    {
        if(server is not null)
        {
            ServersEFCoreRepository.UpdateServer(server.ServerId, server);
            await Task.Delay(100);
        }

        NavigationManager.NavigateTo($"/servers/back_from/{this.server?.City}");
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context){
        var isConfirmed = await IJSRuntime.InvokeAsync<bool>("confirm", "Czy chcesz opuścić stronę?");

        if(!isConfirmed){
            context.PreventNavigation();
        }
    }
}
