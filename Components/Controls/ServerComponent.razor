@inject NavigationManager NavManager;
@inject TorontoOnlineServersStore TorontoOnlineServersStore;

@inject IServersEFCoreRepository ServersEFCoreRepository;

@if (Server != null)
{
    <tr>
        <td> @Server.Name </td>
        <td> @Server.City </td>
        <td style="color:@((Server.IsOnline ? "green" : "red"))">
            @(Server.IsOnline ? "online" : "offline")
        </td>
        <td>
            @if(Server.IsOnline)
            {
                Random random = new Random();
                int randomNumber = random.Next(0, 500);
                <text> @randomNumber </text>
            }
            else
            {
                <text> N/A </text>
            }
        </td>
        <td>
            @if (Server.IsOnline)
            {
                <button type="button"
                class="btn btn-outline-danger"
                @onclick="@(() => {SetServerStatus(false);})">
                    Off </button>
            }
            else
            {
                <button type="button"
                class="btn btn-outline-success"
                @onclick="@(() => {SetServerStatus(true);})">
                    On </button>
            }

            &nbsp;
            <a href="/Servers/edit/@Server.ServerId" class="btn btn-outline-dark"> Edit </a>
        </td>
        <td>
            <EditForm Model="Server"
            FormName="@($"form-Server-{Server.ServerId}")"
            OnValidSubmit="@(() => { DeleteServer(Server.ServerId); })">
                <button type="submit" class="btn btn-primary"> Delete </button>
            </EditForm>
        </td>
    </tr>

    @*     <li @key="Server.ServerId" style="background-color: @GetBackgroundColor()">
        @Server.Name in @Server.City is
        <span style="$color: @(Server.IsOnline ? "green" : "red" )">
            @(Server.IsOnline ? "online" : "offline")
        </span>
        &nbsp;

        @if(Server.IsOnline){
            <button type="button"
            class="btn btn-outline-danger"
            @onclick=@(() => {Server.IsOnline = false;})>
                Turn off
            </button>
        } else {
            <button type="button"
            class="btn btn-outline-success"
            @onclick=@(() => {Server.IsOnline = true;})>
                Turn on
            </button>
        }

        @if(Server.IsOnline){
            Random random = new Random();
            int randomNumer = random.Next(0, 500);
            <text> @randomNumer </text>

        } else {
            <text> N/A </text>
        }


        @* <button type="button" class="btn btn-link" @onclick="@(() => this.editingServer = !this.editingServer)"> Edit </button> *@




    @*         @if(editingServer){
            <ServerManagement.Components.Pages.EditServer
            Id="Server.ServerId"
            >
            </ServerManagement.Components.Pages.EditServer>
        } *@
}

@code {
    private bool editingServer = false;

    [Parameter]
    public Server? Server { get; set; } = new Server { Name = "Server 1", City = "Toronto" };

    [CascadingParameter(Name = "SelectedCity")]
    public string? SelectedCity { get; set; }

    private async Task DeleteServer(int serverId)
    {
        if (serverId > 0)
        {
            ServersEFCoreRepository.DeleteServer(serverId);
            await Task.Delay(100);
        }

        NavManager.NavigateTo("/servers", true);
    }

    private void ChangeStatus()
    {
        if (Server != null)
            this.Server.IsOnline = !this.Server.IsOnline;
    }

    private string GetBackgroundColor()
    {
        if(SelectedCity != null)
        {
            switch(this.SelectedCity){
                case "Toronto": return "powderblue";
                case "Montreal": return "lightgray";
                case "Ottawa": return "palegreen";
                case "Calgary": return "pink";
                case "Halifax": return "white";
                default:
                    return "white";
            }
        }
        else
        {
            return "white";
        }

    }

    private void SetServerStatus(bool status)
    {
        if(this.Server is not null)
        {
            if(this.Server.IsOnline != status)
            {
                if(this.Server.City.Equals("Toronto", StringComparison.OrdinalIgnoreCase))
                {
                    var num = TorontoOnlineServersStore.GetNumberServerOnline();
                    if (status)
                        TorontoOnlineServersStore.SetNumbersServersOnline(num + 1);
                    else if(num > 1)
                        TorontoOnlineServersStore.SetNumbersServersOnline(num - 1);
                }

                ServersEFCoreRepository.UpdateServer(this.Server.ServerId, this.Server);
            }
        }
    }
}
